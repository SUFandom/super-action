name: Patch GSI to Samsung Super Image v.0.1

on:
    workflow_dispatch:
        inputs:
            SUPER_LOCATE:
                description: 'Super Image Link, make sure its in super.img form, NOT IN SUPER.IMG.LZ4'
                required: false
            NAME_ID:
                description: 'What you want to call the finished product'
                required: true
                default: 'GSI-Build-proto'
            COMPRESSION_CHOICE:
                description: 'Contain the image? (other types of compression coming soon)'
                required: true
                default: 'xz'
                type: choice
                options:
                    - 'tar'
                    - 'xz'
                    - '7z'
                    - 'uncompressed'
                    - all (tar,tar.gz,7z,uncompressed)
            GSI_IMG_LOCATION_XT:
                description: 'Enter GSI Link (Extracted, img only, NO SPACES!)'
                required: false
            GSI_IMG_LOCATION_CMP:
                description: 'Enter GSI Link (Compressed into .xz)'
                required: false
            NAME_REL:
                description: 'Enter Name for Github Release'
                required: true
            FOLDER_HEADING:
                description: 'Enter what directory it will land on Sourceforge (REQUIRES THAT DIRECTORY TO BE PRESENT THERE, DOUBLE CHECK IT PLEASE) ALSO PLEASE ADD SLASH "/" at the end'
                required: true
            # PROJECT_ROOT_NAME:
            #     description: 'Reading comprehension needed!: What project root name called: for SUFandom would be like this :https://sourceforge.net/projects/xynoxx-prebuilt-gsi:, so you stictly type : xynoxx-prebuilt-gsi : '
            #     required: true

jobs:
    Building-GSI:
        if: github.event.repository.owner.id == github.event.sender.id
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            

                - name: Display Session Parameters, for Logging Purposes
                  run: |
                    echo "::group::User ENV Var"
                    echo "Super Location: ${{ github.event.inputs.SUPER_LOCATE }}"
                    echo "Name ID: ${{ github.event.inputs.NAME_ID }}"
                    echo "Compression Choice: ${{ github.event.inputs.COMPRESSION_CHOICE }}"
                    echo "GSI IMG Location in Extracted Form: ${{ github.event.inputs.GSI_IMG_LOCATION_XT }}"
                    echo "GSI IMG Location in Compressed form: ${{ github.event.inputs.GSI_IMG_LOCATION_CMP }}"
                    echo "Name REL: ${{ github.event.inputs.NAME_REL }}"
                    echo "Super LZ4: ${{ github.event.inputs.LZ4_SUPER }}"
                    echo "Heading: ${{ github.event.inputs.FOLDER_HEADING }}"

                - name: Check Out
                  uses: actions/checkout@v3

                - name: Cleanup Bloated Action Environment
                  uses: rokibhasansagar/slimhub_actions@main
                  with: 
                    retain: "docker_imgcache,docker_buildkit,container_tools,nodejs_npm,toolcache_node"
                
                - name: Display Size Block
                  run: |
                    lsblk
                
                - name: Prepare the Environment
                  run: |
                    sudo apt update
                    sudo apt upgrade -y
                    sudo apt install p7zip* aria2 wget android-tools* lz4 rsync zstd libprotobuf-dev brotli android-sdk-libsparse-utils
                    # IDK TF AM I DOING
                    pwd >> dir.txt
                    LOCATION_POINT=$(pwd)
                    echo $LOCATION_POINT
                
                - name: Grab Utils
name: Patch-GSI-to-Samsung-Super-Image

on:
  workflow_dispatch:
    inputs:
      SUPER_LOCATE:
        description: 'Super Image Link (super.img)'
        required: true
      NAME_ID:
        description: 'Name for the finished product'
        required: true
        default: 'GSI-Build-proto'
      COMPRESSION_CHOICE:
        description: 'Compression method for the image'
        required: true
        default: 'xz'
        type: choice
        options:
          - 'tar'
          - 'xz'
          - '7z'
          - 'uncompressed'
          - 'all (tar,tar.xz,7z,uncompressed)'
      GSI_IMG_LOCATION_XT:
        description: 'GSI Image Link (extracted, img only, no spaces)'
        required: false
      GSI_IMG_LOCATION_CMP:
        description: 'GSI Image Link (compressed into .xz)'
        required: false
      NAME_REL:
        description: 'Name for GitHub Release'
        required: true
      FOLDER_HEADING:
        description: 'Directory on SourceForge where it will land (must be present)'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Display Session Parameters
        run: |
          echo "::group::User Environment Variables"
          echo "Super Location: ${{ github.event.inputs.SUPER_LOCATE }}"
          echo "Name ID: ${{ github.event.inputs.NAME_ID }}"
          echo "Compression Choice: ${{ github.event.inputs.COMPRESSION_CHOICE }}"
          echo "GSI IMG Location in Extracted Form: ${{ github.event.inputs.GSI_IMG_LOCATION_XT }}"
          echo "GSI IMG Location in Compressed form: ${{ github.event.inputs.GSI_IMG_LOCATION_CMP }}"
          echo "Name REL: ${{ github.event.inputs.NAME_REL }}"
          echo "Heading: ${{ github.event.inputs.FOLDER_HEADING }}"
          echo "::endgroup::"

      - name: Check Out Repository
        uses: actions/checkout@v2

      - name: Cleanup Environment
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install p7zip* aria2 wget android-tools* lz4 rsync zstd libprotobuf-dev brotli android-sdk-libsparse-utils

      - name: Download Utils
        run: |
          mkdir bin
          cd bin
          wget https://github.com/SUFandom/super-patch/raw/main/packages/amd64/lpadd
          wget https://github.com/SUFandom/super-patch/raw/main/packages/amd64/lpdump
          wget https://github.com/SUFandom/super-patch/raw/main/packages/amd64/lpmake
          wget https://github.com/SUFandom/super-patch/raw/main/packages/amd64/lpunpack
          chmod +x *
          sudo cp * /usr/bin/
          cd ..
          mkdir -p universal
          cd universal
          wget https://github.com/SUFandom/super-patch/raw/main/fake-props/product.img
          wget https://github.com/SUFandom/super-patch/raw/main/fake-props/system_ext.img
          cd ..

      - name: Download GSI Image
        run: |
          if [ -n "${{ github.event.inputs.GSI_IMG_LOCATION_CMP }}" ]; then
            aria2c -x 10 "${{ github.event.inputs.GSI_IMG_LOCATION_CMP }}" -d image_build
          elif [ -n "${{ github.event.inputs.GSI_IMG_LOCATION_XT }}" ]; then
            aria2c -x 10 "${{ github.event.inputs.GSI_IMG_LOCATION_XT }}" -d image_build
          fi

      - name: Index Files
        run: |
          export DIR="$(pwd)/image_build"
          export ODM="$DIR/odm.img"
          export PRODUCT="$DIR/product.img"
          export SYSTEM="$DIR/system.img"
          export SYSTEM_EXT="$DIR/system_ext.img"
          export VENDOR="$DIR/vendor.img"
          export SUPER="$DIR/super.img"
          export TMP_ENVIRO="$(pwd)/tmp"

          if [ -e "$DIR/super.img" ]; then
            simg2img $DIR/super.img $DIR/super_raw.img
            if [ -e "$DIR/super_raw.img" ]; then
              if [ "$(stat -c%s "$DIR/super_raw.img")" -lt 100000 ]; then
                rm -rf $DIR/super_raw.img
                lpdump $DIR/super.img > $TMP_ENVIRO/super_map.txt
                printf "$(<$TMP_ENVIRO/super_map.txt)" | grep -e "Size:" | awk '{print $2}' > $TMP_ENVIRO/super_size.txt
                printf "$(<$TMP_ENVIRO/super_map.txt)" | grep -e "Maximum size:" | awk '{print $3}' | sed '2!d' > $TMP_ENVIRO/super_main.txt
                lpunpack $DIR/super.img $DIR/
              else
                rm -rf $DIR/super.img
                lpdump $DIR/super_raw.img > $TMP_ENVIRO/super_map.txt
                printf "$(<$TMP_ENVIRO/super_map.txt)" | grep -e "Size:" | awk '{print $2}' > $TMP_ENVIRO/super_size.txt
                printf "$(<$TMP_ENVIRO/super_map.txt)" | grep -e "Maximum size:" | awk '{print $3}' | sed '2!d' > $TMP_ENVIRO/super_main.txt
                lpunpack $DIR/super_raw.img $DIR/
              fi
            else
              echo "Super.img is corrupted"
              exit 1
            fi
          fi

      - name: Edit Super.img
        run: |
          export DIR="$(pwd)/image_build"
          export SYSTEM="$DIR/system.img"
          export PRODUCT="$DIR/product.img"

          rm -rf $SYSTEM
          mv image_build/system.img $SYSTEM
          if [ "$(stat -c%s "$SYSTEM")" -lt 100000 ]; then 
            echo "Invalid size for a GSI"
            exit 1
          fi
          cp universal/* $DIR/

      - name: Build Super.img
        run: |
          export DIR="$(pwd)/image_build"
          export ODM="$DIR/odm.img"
          export PRODUCT="$DIR/product.img"
          export SYSTEM="$DIR/system.img"
          export SYSTEM_EXT="$DIR/system_ext.img"
          export VENDOR="$DIR/vendor.img"
          export SUPER="$DIR/super.img"
          export TMP_ENVIRO="$(pwd)/tmp"

          rm -rf $SUPER
          if [ "$(find $DIR/system.img -type f ! -size 0 -printf '%s\n' | sed 's/.\.[0-9]*//')" == 1 ]; then
            echo "PRC"
          else
            simg2img $DIR/system.img $DIR/system.raw.img
          fi
          if [ -e "$DIR/odm.img" ]; then
            if [ -e "$DIR/product.img" ]; then
              if [ "$(stat -c%s "$DIR/product.img")" -gt 6000 ]; then 
                cp -urf universal/product.img $DIR/product.img
              fi
            else
              cp -urf universal/product.img $DIR/product.img
            fi
            cp universal/product.img $PRODUCT
            lpmake --metadata-size 65536 --super-name super --metadata-slots 2 --device super:$(<$TMP_ENVIRO/super_size.txt) --group main:$(<$TMP_ENVIRO/super_main.txt) --partition system:readonly:$(stat -c%s "$DIR/system.img"):main --image system=$DIR/system.img --partition vendor:readonly:$(stat -c%s "$DIR/vendor.img"):main --image vendor=$DIR/vendor.img --partition product:readonly:$(stat -c%s "$DIR/product.img"):main --image product=$DIR/product.img --partition odm:readonly:$(stat -c%s "$DIR/odm.img"):main --image odm=$DIR/odm.img --sparse --output $DIR/super.img
          else
            if [ -e "$DIR/product.img" ]; then 
              if [ "$(stat -c%s "$DIR/product.img")" -gt 6000 ]; then
                cp -urf universal/product.img $DIR/product.img
                cp universal/product.img $PRODUCT
              fi
            else 
              cp -urf universal/product.img $DIR/product.img
            fi
            if [ !  -e "$DIR/system_ext.img" ]; then
              cp -urf universal/system_ext.img $DIR/product.img
            else 
              cp -urf universal/system_ext.img $DIR/product.img
            fi 
            lpmake --metadata-size 65536 --super-name super --metadata-slots 2 --device super:$(<$TMP_ENVIRO/super_size.txt) --group main:$(<$TMP_ENVIRO/super_main.txt) --partition system:readonly:$(stat -c%s "$DIR/system.img"):main --image system=$DIR/system.img --partition vendor:readonly:$(stat -c%s "$DIR/vendor.img"):main --image vendor=$DIR/vendor.img --partition product:readonly:$(stat -c%s "$DIR/product.img"):main --image product=$DIR/product.img --partition system_ext:readonly:$(stat -c%s "$DIR/system_ext.img"):main --image system_ext=$DIR/system_ext.img --sparse --output $DIR/super.img

      - name: Pack Image
        run: |
          export DIR="$(pwd)/image_build"
          export PRODUCT="$DIR/product.img"
          export SYSTEM="$DIR/system.img"
          export SYSTEM_EXT="$DIR/system_ext.img"
          export VENDOR="$DIR/vendor.img"
          export SUPER="$DIR/super.img"
          export TMP_ENVIRO="$(pwd)/tmp"

          if [ "$COMPRESSION_CHOICE" == "uncompressed" ]; then
              XZ_OPT=-9 tar -I lz4 -I zstd -I brotli -cf  $FOLDER_HEADING-$NAME_REL.tar
          fi
          
          if [ "$COMPRESSION_CHOICE" == "tar" ]; then
              XZ_OPT=-9 tar -I lz4 -I zstd -I brotli -cf  $FOLDER_HEADING-$NAME_REL.tar $SUPER
          fi
          
          if [ "$COMPRESSION_CHOICE" == "tar.xz" ]; then
              XZ_OPT=-9 tar -I lz4 -I zstd -I brotli -cf  $FOLDER_HEADING-$NAME_REL.tar.xz $SUPER
          fi
          
          if [ "$COMPRESSION_CHOICE" == "7z" ]; then
              XZ_OPT=-9 7z -mx=9 a $FOLDER_HEADING-$NAME_REL.7z $SUPER
          fi
          
          if [ "$COMPRESSION_CHOICE" == "all (tar,tar.xz,7z,uncompressed)" ]; then
              XZ_OPT=-9 tar -I lz4 -I zstd -I brotli -cf  $FOLDER_HEADING-$NAME_REL.tar $SUPER
              XZ_OPT=-9 tar -I lz4 -I zstd -I brotli -cf  $FOLDER_HEADING-$NAME_REL.tar.xz $SUPER
              XZ_OPT=-9 7z -mx=9 a $FOLDER_HEADING-$NAME_REL.7z $SUPER
          fi
          
          rm -rf $SUPER
